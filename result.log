rm -rf ../exec_output/Linked_List.o
rm -rf ../exec_output/Fibonacci_Heap.o
rm -rf ../exec_output/AdjList.o
rm -rf ../exec_output/Union_Find.o
rm -rf ../exec_output/Kruskal.o
rm -rf ../exec_output/Kruskal_main.o
rm -rf ./tags
g++ -g -Wall -O3 -std=c++11  -c ../Linked_List/Linked_List.cpp  -I ./include  -I ../Fibonacci_Heap/include  -I ../Linked_List/include  -I ../Adjacent_List/include  -I ../MST_Edge/include  -I ../Union_Find/include -o ../exec_output/Linked_List.o
g++ -g -Wall -O3 -std=c++11  -c ../Fibonacci_Heap/Fibonacci_Heap.cpp  -I ./include  -I ../Fibonacci_Heap/include  -I ../Linked_List/include  -I ../Adjacent_List/include  -I ../MST_Edge/include  -I ../Union_Find/include -o ../exec_output/Fibonacci_Heap.o
g++ -g -Wall -O3 -std=c++11  -c ../Adjacent_List/AdjList.cpp  -I ./include  -I ../Fibonacci_Heap/include  -I ../Linked_List/include  -I ../Adjacent_List/include  -I ../MST_Edge/include  -I ../Union_Find/include -o ../exec_output/AdjList.o
g++ -g -Wall -O3 -std=c++11  -c ../Union_Find/Union_Find.cpp  -I ./include  -I ../Fibonacci_Heap/include  -I ../Linked_List/include  -I ../Adjacent_List/include  -I ../MST_Edge/include  -I ../Union_Find/include -o ../exec_output/Union_Find.o
g++ -g -Wall -O3 -std=c++11   -I ./include  -I ../Fibonacci_Heap/include  -I ../Linked_List/include  -I ../Adjacent_List/include  -I ../MST_Edge/include  -I ../Union_Find/include -c Kruskal.cpp -o ../exec_output/Kruskal.o
/usr/local/bin/ctags -R ./*
/usr/local/bin/ctags -a ./include/* -a ../Fibonacci_Heap/* -a ../Fibonacci_Heap/include/* -a ../Linked_List/* -a ../Linked_List/include/* -a ../Adjacent_List/* -a ../Adjacent_List/include/* -a ../MST_Edge/include/* -a ../Union_Find/* -a ../Union_Find/include/*
g++ -g -Wall -O3 -std=c++11   -I ./include  -I ../Fibonacci_Heap/include  -I ../Linked_List/include  -I ../Adjacent_List/include  -I ../MST_Edge/include  -I ../Union_Find/include ../exec_output/Linked_List.o ../exec_output/Fibonacci_Heap.o ../exec_output/AdjList.o ../exec_output/Union_Find.o ../exec_output/Kruskal.o Kruskal_main.cpp -o ../exec_output/Kruskal_main.o
../exec_output/Kruskal_main.o
-----------------LinkedListNode-----------------
node_a = (2147483647, 0x7fac40c03270)
node_b = (2147483647, 0x7fac40c032a0)
node_h = (2147483647, 0x7fac40c032d0)
node_i = (2147483647, 0x7fac40c03300)
node_c = (2147483647, 0x7fac40c03330)
node_g = (2147483647, 0x7fac40c03370)
node_f = (2147483647, 0x7fac40c033a0)
node_d = (2147483647, 0x7fac40c033d0)
node_e = (2147483647, 0x7fac40c03400)
----------------All node-----------------
all_node = [a, b, h, i, c, g, f, d, e]
-----------------map_node_st2ll-----------------
map_node_st2ll[a] = (2147483647, 0x7fac40c03270)
map_node_st2ll[b] = (2147483647, 0x7fac40c032a0)
map_node_st2ll[h] = (2147483647, 0x7fac40c032d0)
map_node_st2ll[i] = (2147483647, 0x7fac40c03300)
map_node_st2ll[c] = (2147483647, 0x7fac40c03330)
map_node_st2ll[g] = (2147483647, 0x7fac40c03370)
map_node_st2ll[f] = (2147483647, 0x7fac40c033a0)
map_node_st2ll[d] = (2147483647, 0x7fac40c033d0)
map_node_st2ll[e] = (2147483647, 0x7fac40c03400)
-----------------Set Adjacent List of Graph(V, E)-----------------
-----------------AdjList::PrintAdjList, node_a-----------------
[4 8]
[b h]
[0x7fac40c036e0 0x7fac40c03890]
first = 0x7fac40c036e0
last = 0x7fac40c03890
map_weight[a] = [4(0x7fac40c03270, 0x7fac40c032a0), 8(0x7fac40c03270, 0x7fac40c032d0)]
-----------------AdjList::PrintAdjList, node_b-----------------
[4 8 11]
[a c h]
[0x7fac40c037d0 0x7fac40c03a30 0x7fac40c03b50]
first = 0x7fac40c037d0
last = 0x7fac40c03b50
map_weight[b] = [4(0x7fac40c032a0, 0x7fac40c03270), 8(0x7fac40c032a0, 0x7fac40c03330), 11(0x7fac40c032a0, 0x7fac40c032d0)]
-----------------AdjList::PrintAdjList, node_h-----------------
[8 11 1 7]
[a b g i]
[0x7fac40c03900 0x7fac40c03bd0 0x7fac40c03c20 0x7fac40c03d90]
first = 0x7fac40c03900
last = 0x7fac40c03d90
map_weight[h] = [8(0x7fac40c032d0, 0x7fac40c03270), 11(0x7fac40c032d0, 0x7fac40c032a0), 1(0x7fac40c032d0, 0x7fac40c03370), 7(0x7fac40c032d0, 0x7fac40c03300)]
-----------------AdjList::PrintAdjList, node_c-----------------
[8 2 7 4]
[b i d f]
[0x7fac40c03aa0 0x7fac40c04110 0x7fac40c041e0 0x7fac40c04330]
first = 0x7fac40c03aa0
last = 0x7fac40c04330
map_weight[c] = [8(0x7fac40c03330, 0x7fac40c032a0), 2(0x7fac40c03330, 0x7fac40c03300), 7(0x7fac40c03330, 0x7fac40c033d0), 4(0x7fac40c03330, 0x7fac40c033a0)]
-----------------AdjList::PrintAdjList, node_i-----------------
[7 6 2]
[h g c]
[0x7fac40c03e00 0x7fac40c040c0 0x7fac40c04160]
first = 0x7fac40c03e00
last = 0x7fac40c04160
map_weight[i] = [7(0x7fac40c03300, 0x7fac40c032d0), 6(0x7fac40c03300, 0x7fac40c03370), 2(0x7fac40c03300, 0x7fac40c03330)]
-----------------AdjList::PrintAdjList, node_g-----------------
[1 2 6]
[h f i]
[0x7fac40c03cc0 0x7fac40c039e0 0x7fac40c04040]
first = 0x7fac40c03cc0
last = 0x7fac40c04040
map_weight[g] = [1(0x7fac40c03370, 0x7fac40c032d0), 2(0x7fac40c03370, 0x7fac40c033a0), 6(0x7fac40c03370, 0x7fac40c03300)]
-----------------AdjList::PrintAdjList, node_d-----------------
[7 14 9]
[c f e]
[0x7fac40c04280 0x7fac40c04450 0x7fac40c04600]
first = 0x7fac40c04280
last = 0x7fac40c04600
map_weight[d] = [7(0x7fac40c033d0, 0x7fac40c03330), 14(0x7fac40c033d0, 0x7fac40c033a0), 9(0x7fac40c033d0, 0x7fac40c03400)]
-----------------AdjList::PrintAdjList, node_e-----------------
[10 9]
[f d]
[0x7fac40c04510 0x7fac40c04680]
first = 0x7fac40c04510
last = 0x7fac40c04680
map_weight[e] = [10(0x7fac40c03400, 0x7fac40c033a0), 9(0x7fac40c03400, 0x7fac40c033d0)]
-----------------AdjList::PrintAdjList, node_f-----------------
[2 4 14 10]
[g c d e]
[0x7fac40c03f90 0x7fac40c04380 0x7fac40c043d0 0x7fac40c044a0]
first = 0x7fac40c03f90
last = 0x7fac40c044a0
map_weight[f] = [2(0x7fac40c033a0, 0x7fac40c03370), 4(0x7fac40c033a0, 0x7fac40c03330), 14(0x7fac40c033a0, 0x7fac40c033d0), 10(0x7fac40c033a0, 0x7fac40c03400)]
-----------------Kruskal_Algorithm::InitialSet-----------------
##################################
#########      F0      ###########
##################################
(8  , 0x7fac40c04820, 0  , False, a->h, True)
##################################
#########      F1      ###########
##################################
(8  , 0x7fac40c04960, 0  , False, b->c, True)
##################################
#########      F2      ###########
##################################
(11 , 0x7fac40c04aa0, 0  , False, b->h, True)
##################################
#########      F3      ###########
##################################
(7  , 0x7fac40c04ce0, 0  , False, h->i, True)
##################################
#########      F4      ###########
##################################
(6  , 0x7fac40c04e90, 0  , False, i->g, True)
##################################
#########      F5      ###########
##################################
(2  , 0x7fac40c04f60, 0  , False, i->c, True)
##################################
#########      F6      ###########
##################################
(7  , 0x7fac40c05030, 0  , False, c->d, True)
##################################
#########      F7      ###########
##################################
(4  , 0x7fac40c05170, 0  , False, c->f, True)
##################################
#########      F8      ###########
##################################
(2  , 0x7fac40c05280, 0  , False, g->f, True)
##################################
#########      F9      ###########
##################################
(14 , 0x7fac40c05380, 0  , False, f->d, True)
##################################
#########      F10      ###########
##################################
(10 , 0x7fac40c05520, 0  , False, f->e, True)
##################################
#########      F11      ###########
##################################
(9  , 0x7fac40c055f0, 0  , False, d->e, True)
##################################
#########      F12      ###########
##################################
(1  , 0x7fac40c04ba0, 0  , False, h->g, True)
##################################
#########      F13      ###########
##################################
(4  , 0x7fac40c04710, 0  , False, a->b, True)
-----------------Kruskal_Algorithm::FindMST-----------------
It is UnionFind destructor.
MST : 
(    h -->     g, weight =     1)
(    i -->     c, weight =     2)
(    g -->     f, weight =     2)
(    a -->     b, weight =     4)
(    c -->     f, weight =     4)
(    c -->     d, weight =     7)
(    b -->     c, weight =     8)
(    d -->     e, weight =     9)
minimum total edge weight = 37
-----------------Kruskal_Algorithm::Release-----------------
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is MST_Edge destructor.
It is Fibonacci_Heap destructor.
It is AdjList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
It is LinkedList destructor.
